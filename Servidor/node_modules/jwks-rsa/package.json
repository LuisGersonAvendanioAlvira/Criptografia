{
  "_from": "jwks-rsa",
  "_id": "jwks-rsa@1.6.0",
  "_inBundle": false,
  "_integrity": "sha512-gLhpd7Ka7Jy8ofm9OVj0PFPtSdx3+W2dncF3UCA1wDTAbvfiB1GhHbbyQlz8bqLF5+rge7pgD/DALRfgZi8Fgg==",
  "_location": "/jwks-rsa",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "jwks-rsa",
    "fetchSpec": "latest",
    "name": "jwks-rsa",
    "raw": "jwks-rsa",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/jwks-rsa/-/jwks-rsa-1.6.0.tgz",
  "_shasum": "d36356398a67619b237becfe8f2db2b66829b10f",
  "_shrinkwrap": null,
  "_spec": "jwks-rsa",
  "_where": "/home/arquitectura/Escritorio/Proyecto Criptografia/Tienda/Servidor",
  "author": {
    "name": "Auth0"
  },
  "bugs": {
    "url": "https://github.com/auth0/node-jwks-rsa/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@types/express-jwt": "0.0.42",
    "debug": "^2.6.9",
    "jsonwebtoken": "^8.5.1",
    "limiter": "^1.1.4",
    "lru-memoizer": "^1.12.0",
    "ms": "^2.1.1",
    "request": "^2.88.0"
  },
  "deprecated": false,
  "description": "Library to retrieve RSA public keys from a JWKS endpoint",
  "devDependencies": {
    "@types/chai": "^4.1.7",
    "@types/mocha": "^5.2.7",
    "@types/nock": "^10.0.3",
    "babel-cli": "^6.9.0",
    "babel-core": "^6.9.0",
    "babel-eslint": "^6.0.4",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-stage-0": "^6.5.0",
    "chai": "^3.5.0",
    "eslint": "^5.16.0",
    "eslint-plugin-babel": "^5.3.0",
    "express": "^4.16.2",
    "express-jwt": "^3.4.0",
    "koa": "^2.2.0",
    "koa-jwt": "^3.2.0",
    "mocha": "^6.1.4",
    "nock": "^10.0.6",
    "passport": "^0.4.0",
    "passport-jwt": "^4.0.0",
    "rimraf": "^2.6.3",
    "supertest": "^3.4.2",
    "ts-node": "^8.2.0",
    "typescript": "^3.5.1"
  },
  "homepage": "https://github.com/auth0/node-jwks-rsa#readme",
  "keywords": [
    "jwks",
    "jwt",
    "rsa"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "jwks-rsa",
  "optionalDependencies": {},
  "readme": "# jwks-rsa\n\n[![NPM version][npm-image]][npm-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\nA library to retrieve RSA signing keys from a JWKS (JSON Web Key Set) endpoint.\n\n> npm install --save jwks-rsa\n\n## Usage\n\nYou'll provide the client with the JWKS endpoint which exposes your signing keys. Using the `getSigningKey` you can then get the signing key that matches a specific `kid`.\n\n```js\nconst jwksClient = require('jwks-rsa');\n\nconst client = jwksClient({\n  strictSsl: true, // Default value\n  jwksUri: 'https://sandrino.auth0.com/.well-known/jwks.json',\n  requestHeaders: {}, // Optional\n  requestAgentOptions: {} // Optional\n});\n\nconst kid = 'RkI5MjI5OUY5ODc1N0Q4QzM0OUYzNkVGMTJDOUEzQkFCOTU3NjE2Rg';\nclient.getSigningKey(kid, (err, key) => {\n  const signingKey = key.publicKey || key.rsaPublicKey;\n\n  // Now I can use this to configure my Express or Hapi middleware\n});\n```\n\nIntegrations are also provided with:\n\n - [express/express-jwt](examples/express-demo)\n - [express/passport-jwt](examples/passport-demo)\n - [hapi/hapi-auth-jwt2](examples/hapi-demo)\n - [koa/koa-jwt](examples/koa-demo)\n\n### Caching\n\nIn order to prevent a call to be made each time a signing key needs to be retrieved you can also configure a cache as follows. If a signing key matching the `kid` is found, this will be cached and the next time this `kid` is requested the signing key will be served from the cache instead of calling back to the JWKS endpoint.\n\n```js\nconst jwksClient = require('jwks-rsa');\n\nconst client = jwksClient({\n  cache: true,\n  cacheMaxEntries: 5, // Default value\n  cacheMaxAge: ms('10h'), // Default value\n  jwksUri: 'https://sandrino.auth0.com/.well-known/jwks.json'\n});\n\nconst kid = 'RkI5MjI5OUY5ODc1N0Q4QzM0OUYzNkVGMTJDOUEzQkFCOTU3NjE2Rg';\nclient.getSigningKey(kid, (err, key) => {\n  const signingKey = key.publicKey || key.rsaPublicKey;\n\n  // Now I can use this to configure my Express or Hapi middleware\n});\n```\n\n### Rate Limiting\n\nEven if caching is enabled the library will call the JWKS endpoint if the `kid` is not available in the cache, because a key rotation could have taken place. To prevent attackers to send many random `kid`s you can also configure rate limiting. This will allow you to limit the number of calls that are made to the JWKS endpoint per minute (because it would be highly unlikely that signing keys are rotated multiple times per minute).\n\n```js\nconst jwksClient = require('jwks-rsa');\n\nconst client = jwksClient({\n  cache: true,\n  rateLimit: true,\n  jwksRequestsPerMinute: 10, // Default value\n  jwksUri: 'https://sandrino.auth0.com/.well-known/jwks.json'\n});\n\nconst kid = 'RkI5MjI5OUY5ODc1N0Q4QzM0OUYzNkVGMTJDOUEzQkFCOTU3NjE2Rg';\nclient.getSigningKey(kid, (err, key) => {\n  const signingKey = key.publicKey || key.rsaPublicKey;\n\n  // Now I can use this to configure my Express or Hapi middleware\n});\n```\n\n### Using AgentOptions for TLS/SSL Configuration\n\nThe `requestAgentOptions` property can be used to configure SSL/TLS options. An\nexample use case is providing a trusted private (i.e. enterprise/corporate) root\ncertificate authority to establish TLS communication with the `jwks_uri`.\n\n```js\nconst jwksClient = require(\"jwks-rsa\");\nconst client = jwksClient({\n  strictSsl: true, // Default value\n  jwksUri: 'https://my-enterprise-id-provider/.well-known/jwks.json',\n  requestHeaders: {}, // Optional\n  requestAgentOptions: {\n    ca: fs.readFileSync(caFile)\n  }\n});\n```\n\nFor more information, see [the NodeJS request library `agentOptions`\ndocumentation](https://github.com/request/request#using-optionsagentoptions).\n\n## Running Tests\n\n```\nnpm run test\n```\n\n## Showing Trace Logs\n\nTo show trace logs you can set the following environment variable:\n\n```\nDEBUG=jwks\n```\n\nOutput:\n\n```\njwks Retrieving keys from http://my-authz-server/.well-known/jwks.json +5ms\njwks Keys: +8ms [ { alg: 'RS256',\n  kty: 'RSA',\n  use: 'sig',\n  x5c: [ 'pk1' ],\n  kid: 'ABC' },\n{ alg: 'RS256', kty: 'RSA', use: 'sig', x5c: [], kid: '123' } ]\n```\n\n## License\n\nThis project is licensed under the MIT license. See the [LICENSE](LICENSE) file for more info.\n\n[npm-image]: https://img.shields.io/npm/v/jwks-rsa.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/jwks-rsa\n[license-image]: http://img.shields.io/npm/l/jwks-rsa.svg?style=flat-square\n[license-url]: #license\n[downloads-image]: http://img.shields.io/npm/dm/jwks-rsa.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/jwks-rsa\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/auth0/node-jwks-rsa.git"
  },
  "scripts": {
    "clean": "rimraf lib/",
    "clean:ts": "rimraf ts-output/",
    "compile": "babel -d lib/ src/",
    "prepublish": "npm run clean && npm run compile",
    "release": "git tag $npm_package_version && git push && git push --tags && npm publish",
    "test": "npm run test:js && npm run test:ts",
    "test-watch": "NODE_ENV=test mocha --require babel-core/register --exit --timeout 5000 $(find ./tests -name *.tests.js) --watch",
    "test:js": "NODE_ENV=test mocha --require babel-core/register --exit --timeout 5000 $(find ./tests -name *.tests.js)",
    "test:ts": "npm run clean:ts && tsc && NODE_ENV=test mocha --require babel-core/register --exit --timeout 5000 $(find ./ts-output -name *.tests.js)"
  },
  "types": "index.d.ts",
  "version": "1.6.0"
}
